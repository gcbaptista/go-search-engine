openapi: 3.0.3
info:
  title: Go Search Engine API
  description: |
    A high-performance, full-text search engine API with advanced features including:
    - Full-text search with typo tolerance (Damerau-Levenshtein distance)
    - Prefix search and autocomplete
    - Advanced filtering and ranking
    - Unicode support
    - Document indexing and management
  version: 1.1.0
  contact:
    name: Go Search Engine
    url: https://github.com/gcbaptista/go-search-engine
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: http://localhost:8080
    description: Development server

tags:
  - name: Index Management
    description: Operations for creating, listing, and managing search indexes
  - name: Document Management
    description: Operations for adding, updating, and managing documents
  - name: Search
    description: Search operations across indexed documents
  - name: Job Management
    description: Background job management for long-running operations like reindexing
  - name: System
    description: System health and status operations
  - name: Analytics
    description: Analytics operations for the search engine
  - name: Search Rules
    description: Search rule management and configuration operations

paths:
  # Rule Management Endpoints
  /api/v1/rules:
    post:
      tags:
        - Search Rules
      summary: Create a new search rule
      description: Creates a new search rule with conditions and actions
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RuleRequest"
      responses:
        "201":
          description: Rule created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RuleResponse"
        "400":
          description: Invalid request body
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

    get:
      tags:
        - Search Rules
      summary: List search rules
      description: Retrieves a list of search rules with optional filtering
      parameters:
        - name: index_name
          in: query
          description: Filter rules by index name
          schema:
            type: string
            example: "movies"
        - name: is_active
          in: query
          description: Filter rules by active status
          schema:
            type: boolean
            example: true
      responses:
        "200":
          description: Rules retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RuleListResponse"

  /api/v1/rules/{ruleId}:
    get:
      tags:
        - Search Rules
      summary: Get a specific rule
      description: Retrieves details of a specific search rule
      parameters:
        - name: ruleId
          in: path
          required: true
          description: Rule ID
          schema:
            type: string
            example: "123e4567-e89b-12d3-a456-426614174000"
      responses:
        "200":
          description: Rule retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RuleResponse"
        "404":
          description: Rule not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

    put:
      tags:
        - Search Rules
      summary: Update a rule
      description: Updates an existing search rule
      parameters:
        - name: ruleId
          in: path
          required: true
          description: Rule ID
          schema:
            type: string
            example: "123e4567-e89b-12d3-a456-426614174000"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RuleRequest"
      responses:
        "200":
          description: Rule updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RuleResponse"
        "400":
          description: Invalid request body
          content:
            application/json:
          schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: Rule not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

    delete:
      tags:
        - Search Rules
      summary: Delete a rule
      description: Deletes a search rule
      parameters:
        - name: ruleId
          in: path
          required: true
          description: Rule ID
          schema:
            type: string
            example: "123e4567-e89b-12d3-a456-426614174000"
      responses:
        "200":
          description: Rule deleted successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RuleMessageResponse"
        "404":
          description: Rule not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /api/v1/rules/{ruleId}/toggle:
    post:
      tags:
        - Search Rules
      summary: Toggle rule active status
      description: Toggles the active status of a search rule
      parameters:
        - name: ruleId
          in: path
          required: true
          description: Rule ID
          schema:
            type: string
            example: "123e4567-e89b-12d3-a456-426614174000"
      responses:
        "200":
          description: Rule status toggled successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RuleResponse"
        "404":
          description: Rule not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /api/v1/rules/test:
    post:
      tags:
        - Search Rules
      summary: Test a rule
      description: Tests a rule against provided search results without persisting the rule
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - rule
                - context
                - results
              properties:
                rule:
                  $ref: "#/components/schemas/Rule"
                context:
                  $ref: "#/components/schemas/RuleEvaluationContext"
                results:
                  type: array
                  items:
                    $ref: "#/components/schemas/HitResult"
      responses:
        "200":
          description: Rule test completed successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RuleTestResponse"
        "400":
          description: Invalid request body
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  # System Endpoints
  /health:
    get:
      tags:
        - System
      summary: Health check
      description: Returns the health status of the search engine
      responses:
        "200":
          description: Service is healthy
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "healthy"
                  service:
                    type: string
                    example: "go-search-engine"
                  timestamp:
                    type: string
                    example: "1640995200"

components:
  schemas:
    IndexSettings:
      type: object
      required:
        - name
        - searchable_fields
      properties:
        name:
            type: string
          description: Unique name for the index
          example: "movies"
        searchable_fields:
          type: array
          items:
            type: string
          description: |
            Fields that can be searched, in priority order. 
            IMPORTANT: Order matters! The search engine will fully exhaust each field 
            (exact matches + typo tolerance) before proceeding to the next field.
          example: ["title", "cast", "genres"]
        filterable_fields:
          type: array
          items:
            type: string
          description: Fields that can be used in filters
          example: ["year", "rating", "genres"]
        ranking_criteria:
          type: array
          items:
            $ref: "#/components/schemas/RankingCriterion"
          description: Ordered list of ranking criteria
        min_word_size_for_1_typo:
            type: integer
          description: Minimum word length to allow 1 typo
          default: 4
          example: 4
        min_word_size_for_2_typos:
            type: integer
          description: Minimum word length to allow 2 typos
          default: 7
          example: 7
        fields_without_prefix_search:
          type: array
          items:
                    type: string
          description: Fields for which prefix/n-gram search is disabled
          example: ["author", "isbn"]
        no_typo_tolerance_fields:
                    type: array
                    items:
                    type: string
          description: Fields for which typo tolerance is disabled (only exact matches)
          example: ["isbn", "product_code"]
        non_typo_tolerant_words:
          type: array
          items:
            type: string
          description: Specific words that should never be typo-matched (e.g., sensitive terms, proper nouns)
          example: ["hitler", "stalin", "covid", "nasa"]
        distinct_field:
          type: string
          description: Field to use for deduplication to avoid returning duplicate documents
          example: "title"

    RankingCriterion:
      type: object
      required:
        - field
        - order
      properties:
        field:
            type: string
          description: Field name to rank by
          example: "popularity"
        order:
            type: string
          enum: ["asc", "desc"]
          description: Sort order
          example: "desc"

    IndexSettingsUpdate:
                type: object
                properties:
        fields_without_prefix_search:
          type: array
          items:
                    type: string
          description: Fields for which prefix/n-gram search should be disabled
          example: ["author", "isbn"]
        no_typo_tolerance_fields:
          type: array
          items:
            type: string
          description: Fields for which typo tolerance should be disabled (only exact matches)
          example: ["isbn", "product_code"]
        non_typo_tolerant_words:
          type: array
          items:
            type: string
          description: Specific words that should never be typo-matched (e.g., sensitive terms, proper nouns)
          example: ["hitler", "stalin", "covid", "nasa"]
        distinct_field:
          type: string
          description: Field to use for deduplication to avoid returning duplicate documents
          example: "title"
        searchable_fields:
          type: array
          items:
            type: string
          description: |
            Fields that can be searched, in priority order. Higher priority fields are searched first.
            **WARNING**: Changing this requires full reindexing and will be performed automatically.
          example: ["title", "cast", "genres"]
        filterable_fields:
          type: array
          items:
            type: string
          description: |
            Fields that can be used in filters (exact match, range, contains operations).
            **WARNING**: Changing this may require reindexing and will be performed automatically.
          example: ["year", "rating", "genres"]
        ranking_criteria:
          type: array
          items:
            $ref: "#/components/schemas/RankingCriterion"
          description: |
            Ranking criteria for search results, applied in sequence.
            **WARNING**: Changing this affects search result ordering and will trigger reindexing.
          example:
            - field: "popularity"
              order: "desc"
            - field: "rating"
              order: "desc"
        min_word_size_for_1_typo:
          type: integer
          minimum: 1
          description: |
            Minimum word length to allow 1 typo correction.
            **WARNING**: Changing this requires reindexing and will be performed automatically.
          example: 4
        min_word_size_for_2_typos:
          type: integer
          minimum: 1
          description: |
            Minimum word length to allow 2 typo corrections.
            **WARNING**: Changing this requires reindexing and will be performed automatically.
          example: 7

    Document:
    post:
      tags:
        - NFT Collections
      summary: Create collection
      description: Creates a new NFT collection for tracking
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - collection
              properties:
                collection:
                  $ref: "#/components/schemas/NFTCollection"
      responses:
        "201":
          description: Collection created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "success"
                  message:
                    type: string
                    example: "Collection created successfully"
                  collection:
                    $ref: "#/components/schemas/NFTCollection"

    get:
      tags:
        - NFT Collections
      summary: List collections
      description: Retrieves a paginated list of NFT collections
      parameters:
        - name: page
          in: query
          description: Page number
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: page_size
          in: query
          description: Number of collections per page
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
      responses:
        "200":
          description: Collections retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "success"
                  collections:
                    type: array
                    items:
                      $ref: "#/components/schemas/NFTCollection"
                  page:
                    type: integer
                    example: 1
                  page_size:
                    type: integer
                    example: 20
                  total:
                    type: integer
                    example: 50

  /api/v1/collections/search:
    get:
      tags:
        - NFT Search
      summary: Search collections
      description: Search for NFT collections with filtering
      parameters:
        - name: q
          in: query
          description: Search query
          schema:
            type: string
        - name: blockchain
          in: query
          description: Filter by blockchain
          schema:
            type: string
        - name: verified
          in: query
          description: Filter by verification status
          schema:
            type: boolean
        - name: page
          in: query
          description: Page number
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: page_size
          in: query
          description: Number of results per page
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
      responses:
        "200":
          description: Collections found successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "success"
                  collections:
                    type: array
                    items:
                      $ref: "#/components/schemas/NFTCollection"

  /api/v1/collections/{contractAddress}:
    get:
      tags:
        - NFT Collections
      summary: Get collection
      description: Retrieves detailed information about a specific collection
      parameters:
        - name: contractAddress
          in: path
          required: true
          description: The contract address
          schema:
            type: string
      responses:
        "200":
          description: Collection retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "success"
                  collection:
                    $ref: "#/components/schemas/NFTCollection"

  # Search Endpoints
  /api/v1/search/portfolios:
    get:
      tags:
        - NFT Search
      summary: Search portfolios
      description: Search for NFT portfolios with filtering
      parameters:
        - name: q
          in: query
          description: Search query
          schema:
            type: string
        - name: blockchain
          in: query
          description: Filter by blockchain
          schema:
            type: string
        - name: public
          in: query
          description: Filter by public visibility
          schema:
            type: boolean
        - name: page
          in: query
          description: Page number
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: page_size
          in: query
          description: Number of results per page
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
      responses:
        "200":
          description: Portfolios found successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "success"
                  portfolios:
                    type: array
                    items:
                      $ref: "#/components/schemas/NFTPortfolio"

  # Market Analytics Endpoints
  /api/v1/market/overview:
    get:
      tags:
        - NFT Market Analytics
      summary: Get market overview
      description: Retrieves comprehensive market overview and statistics
      parameters:
        - name: time_range
          in: query
          description: Time range for market data
          schema:
            type: string
            enum: [24h, 7d, 30d]
            default: "24h"
      responses:
        "200":
          description: Market overview retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "success"
                  overview:
                    $ref: "#/components/schemas/NFTAnalytics"

  /api/v1/market/trending:
    get:
      tags:
        - NFT Market Analytics
      summary: Get trending collections
      description: Retrieves trending NFT collections based on volume and activity
      parameters:
        - name: time_range
          in: query
          description: Time range for trending data
          schema:
            type: string
            enum: [24h, 7d, 30d]
            default: "24h"
        - name: limit
          in: query
          description: Number of trending collections to return
          schema:
            type: integer
            minimum: 1
            maximum: 50
            default: 10
      responses:
        "200":
          description: Trending collections retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "success"
                  trending_collections:
                    type: array
                    items:
                      $ref: "#/components/schemas/TrendingCollection"
                  time_range:
                    type: string
                    example: "24h"
                  limit:
                    type: integer
                    example: 10

  /api/v1/market/top-sales:
    get:
      tags:
        - NFT Market Analytics
      summary: Get top sales
      description: Retrieves the highest value NFT sales
      parameters:
        - name: time_range
          in: query
          description: Time range for sales data
          schema:
            type: string
            enum: [24h, 7d, 30d]
            default: "24h"
        - name: limit
          in: query
          description: Number of top sales to return
          schema:
            type: integer
            minimum: 1
            maximum: 50
            default: 10
      responses:
        "200":
          description: Top sales retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "success"
                  top_sales:
                    type: array
                    items:
                      $ref: "#/components/schemas/TopSale"
                  time_range:
                    type: string
                    example: "24h"
                  limit:
                    type: integer
                    example: 10

  # Rule Management Endpoints
  /api/v1/rules:
    post:
      tags:
        - Search Rules
      summary: Create a new search rule
      description: Creates a new search rule with conditions and actions
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RuleRequest"
      responses:
        "201":
          description: Rule created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RuleResponse"
        "400":
          description: Invalid request body
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

    get:
      tags:
        - Search Rules
      summary: List search rules
      description: Retrieves a list of search rules with optional filtering
      parameters:
        - name: index_name
          in: query
          description: Filter rules by index name
          schema:
            type: string
            example: "movies"
        - name: is_active
          in: query
          description: Filter rules by active status
          schema:
            type: boolean
            example: true
      responses:
        "200":
          description: Rules retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RuleListResponse"

  /api/v1/rules/{ruleId}:
    get:
      tags:
        - Search Rules
      summary: Get a specific rule
      description: Retrieves details of a specific search rule
      parameters:
        - name: ruleId
          in: path
          required: true
          description: Rule ID
          schema:
            type: string
            example: "123e4567-e89b-12d3-a456-426614174000"
      responses:
        "200":
          description: Rule retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RuleResponse"
        "404":
          description: Rule not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

    put:
      tags:
        - Search Rules
      summary: Update a rule
      description: Updates an existing search rule
      parameters:
        - name: ruleId
          in: path
          required: true
          description: Rule ID
          schema:
            type: string
            example: "123e4567-e89b-12d3-a456-426614174000"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RuleRequest"
      responses:
        "200":
          description: Rule updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RuleResponse"
        "400":
          description: Invalid request body
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: Rule not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

    delete:
      tags:
        - Search Rules
      summary: Delete a rule
      description: Deletes a search rule
      parameters:
        - name: ruleId
          in: path
          required: true
          description: Rule ID
          schema:
            type: string
            example: "123e4567-e89b-12d3-a456-426614174000"
      responses:
        "200":
          description: Rule deleted successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RuleMessageResponse"
        "404":
          description: Rule not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /api/v1/rules/{ruleId}/toggle:
    post:
      tags:
        - Search Rules
      summary: Toggle rule active status
      description: Toggles the active status of a search rule
      parameters:
        - name: ruleId
          in: path
          required: true
          description: Rule ID
          schema:
            type: string
            example: "123e4567-e89b-12d3-a456-426614174000"
      responses:
        "200":
          description: Rule status toggled successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RuleResponse"
        "404":
          description: Rule not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /api/v1/rules/test:
    post:
      tags:
        - Search Rules
      summary: Test a rule
      description: Tests a rule against provided search results without persisting the rule
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - rule
                - context
                - results
              properties:
                rule:
                  $ref: "#/components/schemas/Rule"
                context:
                  $ref: "#/components/schemas/RuleEvaluationContext"
                results:
                  type: array
                  items:
                    $ref: "#/components/schemas/HitResult"
      responses:
        "200":
          description: Rule test completed
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "success"
                  test_result:
                    $ref: "#/components/schemas/RuleTestResult"

  # Existing endpoints continue here...
  /health:
    get:
      tags:
        - System
      summary: Health check
      description: Returns the health status of the search engine service
      responses:
        "200":
          description: Service is healthy
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "healthy"
                  service:
                    type: string
                    example: "go-search-engine"
                  timestamp:
                    type: string
                    example: "1640995200"

components:
  schemas:
    IndexSettings:
      type: object
      required:
        - name
        - searchable_fields
      properties:
        name:
          type: string
          description: Unique name for the index
          example: "movies"
        searchable_fields:
          type: array
          items:
            type: string
          description: |
            Fields that can be searched, in priority order. 
            IMPORTANT: Order matters! The search engine will fully exhaust each field 
            (exact matches + typo tolerance) before proceeding to the next field.
          example: ["title", "cast", "genres"]
        filterable_fields:
          type: array
          items:
            type: string
          description: Fields that can be used in filters
          example: ["year", "rating", "genres"]
        ranking_criteria:
          type: array
          items:
            $ref: "#/components/schemas/RankingCriterion"
          description: Ordered list of ranking criteria
        min_word_size_for_1_typo:
          type: integer
          description: Minimum word length to allow 1 typo
          default: 4
          example: 4
        min_word_size_for_2_typos:
          type: integer
          description: Minimum word length to allow 2 typos
          default: 7
          example: 7
        fields_without_prefix_search:
          type: array
          items:
            type: string
          description: Fields for which prefix/n-gram search is disabled
          example: ["author", "isbn"]
        no_typo_tolerance_fields:
          type: array
          items:
            type: string
          description: Fields for which typo tolerance is disabled (only exact matches)
          example: ["isbn", "product_code"]
        non_typo_tolerant_words:
          type: array
          items:
            type: string
          description: Specific words that should never be typo-matched (e.g., sensitive terms, proper nouns)
          example: ["hitler", "stalin", "covid", "nasa"]
        distinct_field:
          type: string
          description: Field to use for deduplication to avoid returning duplicate documents
          example: "title"

    RankingCriterion:
      type: object
      required:
        - field
        - order
      properties:
        field:
          type: string
          description: Field name to rank by
          example: "popularity"
        order:
          type: string
          enum: ["asc", "desc"]
          description: Sort order
          example: "desc"

    IndexSettingsUpdate:
      type: object
      properties:
        fields_without_prefix_search:
          type: array
          items:
            type: string
          description: Fields for which prefix/n-gram search should be disabled
          example: ["author", "isbn"]
        no_typo_tolerance_fields:
          type: array
          items:
            type: string
          description: Fields for which typo tolerance should be disabled (only exact matches)
          example: ["isbn", "product_code"]
        non_typo_tolerant_words:
          type: array
          items:
            type: string
          description: Specific words that should never be typo-matched (e.g., sensitive terms, proper nouns)
          example: ["hitler", "stalin", "covid", "nasa"]
        distinct_field:
          type: string
          description: Field to use for deduplication to avoid returning duplicate documents
          example: "title"
        searchable_fields:
          type: array
          items:
            type: string
          description: |
            Fields that can be searched, in priority order. Higher priority fields are searched first.
            **WARNING**: Changing this requires full reindexing and will be performed automatically.
          example: ["title", "cast", "genres"]
        filterable_fields:
          type: array
          items:
            type: string
          description: |
            Fields that can be used in filters (exact match, range, contains operations).
            **WARNING**: Changing this may require reindexing and will be performed automatically.
          example: ["year", "rating", "genres"]
        ranking_criteria:
          type: array
          items:
            $ref: "#/components/schemas/RankingCriterion"
          description: |
            Ranking criteria for search results, applied in sequence.
            **WARNING**: Changing this affects search result ordering and will trigger reindexing.
          example:
            - field: "popularity"
              order: "desc"
            - field: "rating"
              order: "desc"
        min_word_size_for_1_typo:
          type: integer
          minimum: 1
          description: |
            Minimum word length to allow 1 typo correction.
            **WARNING**: Changing this requires reindexing and will be performed automatically.
          example: 4
        min_word_size_for_2_typos:
          type: integer
          minimum: 1
          description: |
            Minimum word length to allow 2 typo corrections.
            **WARNING**: Changing this requires reindexing and will be performed automatically.
          example: 7

    Document:
      type: object
      required:
        - documentID
      properties:
        documentID:
          type: string
          description: Unique identifier for the document (required) - can be any non-empty string
          example: "022ae9a1-d2ac-3238-b686-96c2a5ce26ba_en-US_MERCHANDISED_title"
      additionalProperties: true
      description: |
        Schema-agnostic document that can contain any fields. The documentID is the only required field
        for document identification and can be any non-empty string. All other fields depend on index configuration.
      example:
        documentID: "product_12345_variant_red"
        title: "The Matrix"
        cast: ["Keanu Reeves", "Laurence Fishburne"]
        genres: ["Action", "Sci-Fi"]
        year: 1999
        rating: 8.7
        popularity: 92.0

    SearchRequest:
      type: object
      required:
        - query
      properties:
        query:
          type: string
          description: Search query string
          example: "lord rings"
        restrict_searchable_fields:
          type: array
          items:
            type: string
          description: |
            **OPTIONAL**: Subset of searchable fields to search in. Must be a subset of the index's configured searchable_fields.
            This allows you to restrict search to only specific fields (e.g., search only in "title" field).
            If omitted, all configured searchable_fields will be used.
            An error will be returned if this field contains invalid field names.
          example: ["title", "cast"]
        retrievable_fields:
          type: array
          items:
            type: string
          description: |
            **OPTIONAL**: Subset of document fields to return in search results. If not provided, all document fields will be returned.
            The documentID field is always included regardless of this parameter.
            This allows you to limit the response size by only returning specific fields (e.g., only "title" and "year").
          example: ["title", "year", "rating"]
        filters:
          $ref: "#/components/schemas/Filters"
        page:
          type: integer
          minimum: 1
          default: 1
          description: Page number for pagination
          example: 1
        page_size:
          type: integer
          minimum: 1
          maximum: 100
          default: 10
          description: Number of results per page
          example: 10
        min_word_size_for_1_typo:
          type: integer
          minimum: 0
          description: |
            **OPTIONAL**: Override the index setting for minimum word size to allow 1 typo.
            If provided, this value will be used instead of the index's configured min_word_size_for_1_typo setting.
            Set to 0 to disable 1-typo tolerance, or a higher value to require longer words for typo tolerance.
          example: 4
        min_word_size_for_2_typos:
          type: integer
          minimum: 0
          description: |
            **OPTIONAL**: Override the index setting for minimum word size to allow 2 typos.
            If provided, this value will be used instead of the index's configured min_word_size_for_2_typos setting.
            Set to 0 to disable 2-typo tolerance, or a higher value to require longer words for typo tolerance.
          example: 7

    SearchResult:
      type: object
      properties:
        hits:
          type: array
          items:
            $ref: "#/components/schemas/SearchHit"
          description: Array of search results
        total:
          type: integer
          description: Total number of matching documents
          example: 25
        page:
          type: integer
          description: Current page number
          example: 1
        page_size:
          type: integer
          description: Number of results per page
          example: 10
        took:
          type: integer
          description: Search time in milliseconds
          example: 15
        query_id:
          type: string
          format: uuid
          description: Unique identifier for this search query
          example: "550e8400-e29b-41d4-a716-446655440000"
        rules:
          $ref: "#/components/schemas/RuleExecutionSummary"
          description: Information about rules applied to this search result

    SearchHit:
      type: object
      properties:
        document:
          $ref: "#/components/schemas/Document"
        score:
          type: number
          format: float
          description: Relevance score for the document
          example: 12.5
        field_matches:
          type: object
          additionalProperties:
            type: array
            items:
              type: string
          description: Fields and terms that matched the query
          example:
            title: ["lord", "rings"]
            cast: ["elijah"]
        hit_info:
          $ref: "#/components/schemas/HitInfo"

    HitInfo:
      type: object
      properties:
        num_typos:
          type: integer
          description: Number of typos corrected in the match
          example: 0
        number_exact_words:
          type: integer
          description: Number of exact word matches
          example: 2

    SuccessMessage:
      type: object
      properties:
        message:
          type: string
          description: Success message
          example: "Operation completed successfully"

    ErrorResponse:
      type: object
      properties:
        error:
          type: string
          description: Error message describing what went wrong
          example: "Invalid request body"

    AnalyticsDashboard:
      type: object
      properties:
        total_searches:
          type: integer
          description: Total number of searches performed
          example: 12847
        searches_change_percent:
          type: number
          format: float
          description: Percentage change in searches compared to the previous period
          example: 12.5
        avg_response_time:
          type: integer
          description: Average response time for searches
          example: 45
        response_time_change:
          type: string
          enum: ["up", "down", "stable"]
          description: Change in response time compared to the previous period
          example: "down"
        total_documents:
          type: integer
          description: Total number of documents in the search engine
          example: 1234
        documents_change_count:
          type: integer
          description: Number of new or updated documents compared to the previous period
          example: 156
        active_indexes:
          type: integer
          description: Number of active search indexes
          example: 8
        indexes_change_count:
          type: integer
          description: Number of new or updated indexes
          example: 2
        search_performance_24h:
          type: array
          items:
            $ref: "#/components/schemas/SearchPerformance"
          description: Search performance metrics for the past 24 hours
        popular_searches:
          type: array
          items:
            $ref: "#/components/schemas/PopularSearch"
          description: Popular search terms
        index_usage:
          type: array
          items:
            $ref: "#/components/schemas/IndexUsage"
          description: Index usage statistics
        response_time_distribution:
          type: object
          additionalProperties:
            type: integer
          description: Response time distribution
        search_types:
          type: object
          additionalProperties:
            type: integer
          description: Search type statistics
        system_health:
          type: object
          properties:
            memory_usage_percent:
              type: number
              format: float
              description: Memory usage percentage
              example: 68.0
            cpu_usage_percent:
              type: number
              format: float
              description: CPU usage percentage
              example: 23.0
            disk_space_percent:
              type: number
              format: float
              description: Disk space usage percentage
              example: 45.0
            index_health_percent:
              type: number
              format: float
              description: Index health percentage
              example: 100.0

    SearchPerformance:
      type: object
      properties:
        hour:
          type: integer
          description: Hour of the day
          example: 0
        search_count:
          type: integer
          description: Number of searches performed
          example: 45
        avg_response_time:
          type: integer
          description: Average response time for searches
          example: 42

    PopularSearch:
      type: object
      properties:
        query:
          type: string
          description: Search query
          example: "matrix"
        search_count:
          type: integer
          description: Number of searches performed
          example: 1247
        trend_change:
          type: string
          enum: ["up", "stable", "down"]
          description: Change in search count compared to the previous period
          example: "up"

    IndexUsage:
      type: object
      properties:
        index_name:
          type: string
          description: Name of the index
          example: "movies"
        document_count:
          type: integer
          description: Number of documents in the index
          example: 1247
        search_count:
          type: integer
          description: Number of searches performed on the index
          example: 2341
        size_mb:
          type: number
          format: float
          description: Size of the index in megabytes
          example: 12.4

    Error:
      type: object
      properties:
        error:
          type: string
          description: Error message describing what went wrong
          example: "Index 'movies' not found"

    Job:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Unique identifier for the job
          example: "550e8400-e29b-41d4-a716-446655440000"
        type:
          type: string
          enum: ["reindex"]
          description: Type of background job
          example: "reindex"
        status:
          type: string
          enum:
            [
              "pending",
              "running",
              "completed",
              "failed",
              "cancelling",
              "cancelled",
            ]
          description: Current status of the job
          example: "running"
        index_name:
          type: string
          description: Name of the index the job is operating on
          example: "movies"
        progress:
          $ref: "#/components/schemas/JobProgress"
        error:
          type: string
          description: Error message if the job failed
          example: "Failed to reindex documents: insufficient disk space"
        created_at:
          type: string
          format: date-time
          description: When the job was created
          example: "2024-01-15T10:30:00Z"
        started_at:
          type: string
          format: date-time
          description: When the job started executing
          example: "2024-01-15T10:30:01Z"
        completed_at:
          type: string
          format: date-time
          description: When the job completed (successfully or with failure)
          example: "2024-01-15T10:32:45Z"
        metadata:
          type: object
          additionalProperties:
            type: string
          description: Additional metadata about the job
          example:
            operation: "update_settings_with_reindex"
            reason: "Settings update requiring reindexing"

    JobProgress:
      type: object
      properties:
        current:
          type: integer
          description: Current progress value
          example: 1500
        total:
          type: integer
          description: Total expected value for completion
          example: 3000
        message:
          type: string
          description: Human-readable progress message
          example: "Reindexed 1500/3000 documents"
      required:
        - current
        - total

    MultiSearchRequest:
      type: object
      required:
        - queries
      properties:
        queries:
          type: array
          items:
            $ref: "#/components/schemas/NamedSearchRequest"
          description: List of named search queries to execute
          minItems: 1
        page:
          type: integer
          minimum: 1
          default: 1
          description: Page number for individual query results
          example: 1
        page_size:
          type: integer
          minimum: 1
          maximum: 100
          default: 10
          description: Number of results per page for individual query results
          example: 10

    NamedSearchRequest:
      type: object
      required:
        - name
        - query
      properties:
        name:
          type: string
          description: Unique identifier for this query within the multi-search request
          example: "title_search"
        query:
          type: string
          description: Search query string
          example: "matrix"
        restrict_searchable_fields:
          type: array
          items:
            type: string
          description: |
            Optional subset of searchable fields to search in. If not provided, searches all configured searchable fields.
          example: ["title", "description"]
        retrievable_fields:
          type: array
          items:
            type: string
          description: |
            Optional subset of document fields to return in results for this query.
          example: ["title", "year", "cast"]
        filters:
          $ref: "#/components/schemas/Filters"
        min_word_size_for_1_typo:
          type: integer
          minimum: 0
          description: |
            Query-specific override for minimum word size to allow 1 typo.
          example: 4
        min_word_size_for_2_typos:
          type: integer
          minimum: 0
          description: |
            Query-specific override for minimum word size to allow 2 typos.
          example: 7

    MultiSearchResult:
      type: object
      properties:
        results:
          type: object
          additionalProperties:
            $ref: "#/components/schemas/SearchResult"
          description: |
            Individual search results keyed by query name.
          example:
            title_search:
              hits: []
              total: 5
              page: 1
              page_size: 10
              took: 12
              query_id: "uuid-1"
            cast_search:
              hits: []
              total: 3
              page: 1
              page_size: 10
              took: 8
              query_id: "uuid-2"
        total_queries:
          type: integer
          description: Number of queries executed
          example: 2
        processing_time_ms:
          type: number
          format: float
          description: Total processing time in milliseconds
          example: 27.5

    Filters:
      type: object
      properties:
        operator:
          type: string
          enum: ["AND", "OR"]
          default: "OR"
          description: Logical operator to combine filter conditions and groups
          example: "AND"
        filters:
          type: array
          items:
            $ref: "#/components/schemas/FilterCondition"
          description: Array of filter conditions
        groups:
          type: array
          items:
            $ref: "#/components/schemas/Filters"
          description: Nested filter groups for complex boolean expressions
      example:
        operator: "AND"
        filters:
          - field: "year"
            operator: "_gte"
            value: 2000
            score: 1.0
          - field: "rating"
            operator: "_gt"
            value: 8.0
            score: 2.0

    FilterCondition:
      type: object
      required:
        - field
        - value
      properties:
        field:
          type: string
          description: Name of the field to filter on
          example: "year"
        operator:
          type: string
          enum:
            [
              "_exact",
              "_ne",
              "_gt",
              "_gte",
              "_lt",
              "_lte",
              "_contains",
              "_ncontains",
              "_contains_any_of",
            ]
          default: "_exact"
          description: |
            Filter operator to apply:
            - `_exact`: Exact match (default)
            - `_ne`: Not equal
            - `_gt`: Greater than
            - `_gte`: Greater than or equal
            - `_lt`: Less than
            - `_lte`: Less than or equal
            - `_contains`: Contains substring (for strings) or contains value (for arrays)
            - `_ncontains`: Does not contain
            - `_contains_any_of`: Contains any of the provided values (for arrays)
          example: "_gte"
        value:
          description: Value to filter against (type depends on field and operator)
          example: 2000
        score:
          type: number
          format: float
          description: Optional score boost for documents matching this condition
          example: 1.0

    # Rule Management Schemas
    RuleRequest:
      type: object
      required:
        - name
        - index_name
        - conditions
        - actions
      properties:
        name:
          type: string
          description: Name of the rule
          example: "Pin featured movie for Matrix searches"
        description:
          type: string
          description: Optional description of the rule
          example: "Pin The Matrix movie to position 1 when users search for 'matrix'"
        index_name:
          type: string
          description: Index this rule applies to, "*" for all indexes
          example: "movies"
        is_active:
          type: boolean
          description: Whether the rule is active
          default: true
          example: true
        priority:
          type: integer
          description: Rule priority (higher numbers = higher priority)
          default: 0
          example: 100
        conditions:
          type: array
          items:
            $ref: "#/components/schemas/RuleCondition"
          description: All conditions must be met for rule to apply
        actions:
          type: array
          items:
            $ref: "#/components/schemas/RuleAction"
          description: Actions to perform when conditions are met
        created_by:
          type: string
          description: User who created the rule
          example: "admin@example.com"

    RuleCondition:
      type: object
      required:
        - type
        - operator
        - value
      properties:
        type:
          type: string
                      enum: [query, result_count]
          description: Type of condition to evaluate
            example: "query"
        operator:
          type: string
          enum: [equals, contains, starts_with, ends_with, gt, gte, lt, lte, in]
          description: Comparison operator
          example: "contains"
        value:
          description: Value to compare against (string comparisons are case-insensitive)
          example: "matrix"

    RuleAction:
      type: object
      required:
        - type
        - target
      properties:
        type:
          type: string
          enum: [pin, hide]
          description: Type of action to perform
          example: "pin"
        target:
          $ref: "#/components/schemas/RuleTarget"
        position:
          type: integer
          minimum: 1
          description: Position for pin actions (1-based)
          example: 1

    RuleTarget:
      type: object
      required:
        - type
      properties:
        type:
          type: string
          enum: [document_id, all_results]
          description: How to identify documents to target
          example: "document_id"
        operator:
          type: string
          enum: [equals, contains, starts_with, ends_with, gt, gte, lt, lte, in]
          description: Comparison operator
          example: "equals"
        value:
          description: Value to match (string comparisons are case-insensitive)
          example: "doc123"

    Rule:
      type: object
      properties:
        id:
          type: string
          description: Unique rule identifier
          example: "123e4567-e89b-12d3-a456-426614174000"
        name:
          type: string
          description: Name of the rule
          example: "Pin featured movie for Matrix searches"
        description:
          type: string
          description: Optional description of the rule
          example: "Pin The Matrix movie to position 1 when users search for 'matrix'"
        index_name:
          type: string
          description: Index this rule applies to
          example: "movies"
        is_active:
          type: boolean
          description: Whether the rule is active
          example: true
        priority:
          type: integer
          description: Rule priority
          example: 100
        conditions:
          type: array
          items:
            $ref: "#/components/schemas/RuleCondition"
        actions:
          type: array
          items:
            $ref: "#/components/schemas/RuleAction"
        created_at:
          type: string
          format: date-time
          description: When the rule was created
          example: "2024-01-15T10:30:00Z"
        updated_at:
          type: string
          format: date-time
          description: When the rule was last updated
          example: "2024-01-15T10:35:00Z"
        created_by:
          type: string
          description: User who created the rule
          example: "admin@example.com"

    RuleResponse:
      type: object
      properties:
        status:
          type: string
          example: "success"
        rule:
          $ref: "#/components/schemas/Rule"
        message:
          type: string
          example: "Rule created successfully"

    RuleListResponse:
      type: object
      properties:
        status:
          type: string
          example: "success"
        rules:
          type: array
          items:
            $ref: "#/components/schemas/Rule"
        count:
          type: integer
          example: 5

    RuleMessageResponse:
      type: object
      properties:
        status:
          type: string
          example: "success"
        message:
          type: string
          example: "Rule deleted successfully"

    RuleEvaluationContext:
      type: object
      properties:
        query:
          type: string
          description: Search query
          example: "matrix"
        index_name:
          type: string
          description: Index name
          example: "movies"
        result_count:
          type: integer
          description: Number of results
          example: 25

    RuleTestResult:
      type: object
      properties:
        original_results:
          type: array
          items:
            $ref: "#/components/schemas/HitResult"
        modified_results:
          type: array
          items:
            $ref: "#/components/schemas/HitResult"
        execution_result:
          $ref: "#/components/schemas/RuleExecutionResult"
        rule_applied:
          type: boolean
          example: true

    RuleExecutionResult:
      type: object
      properties:
        rules_evaluated:
          type: array
          items:
            type: string
          description: IDs of rules that were evaluated
        rules_applied:
          type: array
          items:
            $ref: "#/components/schemas/RuleApplication"
        execution_time_ms:
          type: number
          format: float
          description: Execution time in milliseconds
          example: 2.5
        modifications_applied:
          type: boolean
          description: Whether any modifications were applied
          example: true

    RuleApplication:
      type: object
      properties:
        rule_id:
          type: string
          description: ID of the applied rule
          example: "123e4567-e89b-12d3-a456-426614174000"
        rule_name:
          type: string
          description: Name of the applied rule
          example: "Pin featured movie"
        actions_applied:
          type: array
          items:
            type: string
          description: Types of actions that were applied
          example: ["pin"]
        documents_affected:
          type: integer
          description: Number of documents affected
          example: 1
        applied_at:
          type: string
          format: date-time
          description: When the rule was applied
          example: "2024-01-15T10:30:00Z"

    RuleExecutionSummary:
      type: object
      properties:
        applied:
          type: boolean
          description: Whether any rules were applied to this search result
          example: true
        details:
          type: array
          items:
            $ref: "#/components/schemas/RuleApplicationInfo"
          description: Detailed information about each rule that was applied

    RuleApplicationInfo:
      type: object
      properties:
        rule_name:
          type: string
          description: Name of the rule that was applied
          example: "Pin The Office Superfan Episodes"
        action:
          type: string
          description: Description of the action that was performed
          example: "pinned to position 1"
        trigger:
          type: string
          description: Description of what triggered the rule
          example: "query match: 'The Office'"
        document_ids:
          type: array
          items:
            type: string
          description: IDs of documents affected by this rule
          example: ["23172c5c-ab8d-3473-bedc-d83459536b75_en-US_title"]

  examples:
    MovieIndex:
      summary: Movie database index
      value:
        name: "movies"
        searchable_fields: ["title", "cast", "plot", "genres"]
        filterable_fields: ["year", "rating", "director", "genres"]
        ranking_criteria:
          - field: "popularity"
            order: "desc"
          - field: "rating"
            order: "desc"
        min_word_size_for_1_typo: 4
        min_word_size_for_2_typos: 7

    ProductIndex:
      summary: E-commerce product index
      value:
        name: "products"
        searchable_fields: ["name", "description", "brand", "category"]
        filterable_fields: ["price", "brand", "category", "in_stock"]
        ranking_criteria:
          - field: "popularity"
            order: "desc"
          - field: "price"
            order: "asc"
        min_word_size_for_1_typo: 3
        min_word_size_for_2_typos: 6
        fields_without_prefix_search: ["brand"]
